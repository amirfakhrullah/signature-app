{"ast":null,"code":"export const FETCH_ALL_USERS = 'FETCH_ALL_USERS';\nexport const FETCH_USER_BY_ID = 'FETCH_USER_BY_ID';\nexport const FETCH_USER_BY_EMAIL = 'FETCH_USER_BY_EMAIL';\nexport const LOADING = 'LOADING';\nexport const FAIL = 'FAIL';\nconst URL = 'https://limitless-citadel-83805.herokuapp.com';\nexport const initialOptions = {\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n};\nexport const fetchAllUsers = () => {\n  return async dispatch => {\n    dispatch({\n      type: LOADING\n    });\n    const result = await fetch(`${URL}/api/users`, initialOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse) {\n        dispatch({\n          type: FAIL\n        });\n        return [];\n      }\n\n      window.localStorage.setItem('userStore', jsonResponse);\n      return jsonResponse;\n    });\n\n    if (!result[0]) {\n      dispatch({\n        type: FAIL\n      });\n    } else {\n      dispatch({\n        type: FETCH_ALL_USERS,\n        payload: result[0]\n      });\n    }\n  };\n};\nexport const fetchUserById = id => {\n  return async dispatch => {\n    dispatch({\n      type: LOADING\n    });\n    const result = await fetch(`${URL}/api/users/${id}`, initialOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse) {\n        dispatch({\n          type: FAIL\n        });\n        return {};\n      }\n\n      return jsonResponse;\n    });\n\n    if (!result[0]) {\n      dispatch({\n        type: FAIL\n      });\n    } else {\n      dispatch({\n        type: FETCH_USER_BY_ID,\n        payload: result[0]\n      });\n    }\n  };\n};\nexport const fetchUserByEmail = email => {\n  return async dispatch => {\n    dispatch({\n      type: LOADING\n    });\n    const result = await fetch(`${URL}/api/users/email/${email}`, initialOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse) {\n        return {};\n      }\n\n      return jsonResponse;\n    });\n\n    if (!result[0]) {\n      dispatch({\n        type: FAIL\n      });\n    } else {\n      dispatch({\n        type: FETCH_USER_BY_EMAIL,\n        payload: result[0]\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/ROG/Desktop/client/src/redux/actions/userAction.js"],"names":["FETCH_ALL_USERS","FETCH_USER_BY_ID","FETCH_USER_BY_EMAIL","LOADING","FAIL","URL","initialOptions","headers","Accept","fetchAllUsers","dispatch","type","result","fetch","then","response","ok","json","jsonResponse","window","localStorage","setItem","payload","fetchUserById","id","fetchUserByEmail","email"],"mappings":"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","sourcesContent":["export const FETCH_ALL_USERS = 'FETCH_ALL_USERS';\r\nexport const FETCH_USER_BY_ID = 'FETCH_USER_BY_ID';\r\nexport const FETCH_USER_BY_EMAIL = 'FETCH_USER_BY_EMAIL';\r\nexport const LOADING = 'LOADING';\r\nexport const FAIL = 'FAIL';\r\n\r\nconst URL = 'https://limitless-citadel-83805.herokuapp.com';\r\n\r\nexport const initialOptions = {\r\n    headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n    },\r\n};\r\n\r\n\r\nexport const fetchAllUsers = () => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: LOADING\r\n        });\r\n\r\n        const result = await fetch(`${URL}/api/users`, initialOptions)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse) {\r\n                    dispatch({\r\n                        type: FAIL\r\n                    });\r\n                    return [];\r\n                }\r\n                window.localStorage.setItem('userStore', jsonResponse);\r\n                return jsonResponse;\r\n            })\r\n\r\n        if (!result[0]) {\r\n            dispatch({\r\n                type: FAIL\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: FETCH_ALL_USERS,\r\n                payload: result[0]\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const fetchUserById = (id) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: LOADING\r\n        });\r\n\r\n        const result = await fetch(`${URL}/api/users/${id}`, initialOptions)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse) {\r\n                    dispatch({\r\n                        type: FAIL\r\n                    });\r\n                    return {};\r\n                }\r\n                return jsonResponse;\r\n            })\r\n\r\n        if (!result[0]) {\r\n            dispatch({\r\n                type: FAIL\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: FETCH_USER_BY_ID,\r\n                payload: result[0]\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const fetchUserByEmail = (email) => {\r\n    return async dispatch => {\r\n\r\n        dispatch({\r\n            type: LOADING,\r\n        });\r\n\r\n        const result = await fetch(`${URL}/api/users/email/${email}`, initialOptions)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse) {\r\n                    return {};\r\n                }\r\n                return jsonResponse;\r\n            })\r\n\r\n        if (!result[0]) {\r\n            dispatch({\r\n                type: FAIL\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: FETCH_USER_BY_EMAIL,\r\n                payload: result[0]\r\n            });\r\n        }\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}